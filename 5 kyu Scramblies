"""
Complete the function scramble(str1, str2) that returns true if a portion of str1 characters can be
 rearranged to match str2, otherwise returns false.

Notes:

Only lower case letters will be used (a-z). No punctuation or digits will be included.
Performance needs to be considered
Examples
scramble('rkqodlw', 'world') ==> True
scramble('cedewaraaossoqqyt', 'codewars') ==> True
scramble('katas', 'steak') ==> False
"""

from collections import Counter

s1 = "rkqodlw"
s2 = "world"

def scramble(s1, s2):
    count = 0
    list_one = sorted(list(s1))
    list_two = sorted(list(s2))
    for i in list_two:
        if i in list_one:
            list_one.remove(i)
            count += 1
    return True if len(s2) == count else False


print(scramble(s1, s2))

"=====Better solution====="

"""
all, is validating that each letter found in str2 has enough matches in str1. Let's take the prior example of 
scramble('scriptingjavx','javascript'), there are two occurrences of 'a' in str2 and one in str1, so all would
 cause this to fail because str2[i] <= str1[i] or 2 <= 1 equals False
"""

def scramble(str1, str2):
    str1 = Counter(str1)
    str2 = Counter(str2)
    return all(str2[i] <= str1[i] for i in str2)


print(scramble(s1, s2))

"=====Better solution====="


from collections import Counter
def scramble(s1,s2):
    # Counter basically creates a dictionary of counts and letters
    # Using set subtraction, we know that if anything is left over,
    # something exists in s2 that doesn't exist in s1
    return len(Counter(s2)- Counter(s1)) == 0


